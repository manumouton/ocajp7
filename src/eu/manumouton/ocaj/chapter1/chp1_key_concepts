Chapter 1 : Packaging, compiling and interpreting Java code

1. Packaging

package com.ocaj.exam.tutorial;

package statement attributes:
- optional
- one per source file maximum
- standard naming convention = using reverse domain name, use lowercase chars delimited with underscores
to separate words in the package names
- package names equates to directory structure, if not class unusable
- java.* and javax.* are reserved

Package used for the certification (need to know bacic functionalities of):
- Java Abstract Window Toolkit API (java.awt)
- Java Swing API (javax.swing)
- Java Basic I/O API (java.io)
- Java Networking API (java.net)
- Java Utilities API (java.util)
- core Java Language API (java.lang)

package com.ocaj.exam.tutorial;

import java.io.*;

import statement attributes:
- >= Java 5, static import

//TODO
- compare 1.4.2, 5 & 7 java.util packages
- review the above mentioned package Java 7 API

2. Java class structure

//TODO
- Readings: "How to write unmaintainable code", Roedy Green /
"The Passionate programmer, creating a remarkable carreer in software development", Chad Fowler

2.1. Java naming conventions

- Use Camel case

Elements:
- Class: begins uppercase, continues camel; is a noun; e.g. SpaceShip
- Interface: begins uppercqse, continues camel; is an adjective (capability) or a noun; e.g. Dockable
- Method: begins lowercase, continues camel; is a verb, may include adjective or noun; e.g. orbit
- Instance and static variables: begins lowercase, continues camel; is a noun; e.g. moon
- Parameters and local variables: begins lowercase, continues camel; single words, acronyms or abbreviations;
e.g. i
- Generic type parameters: single uppercase letter; the letter T is recommended; e.g. T
- Constant: all uppercase letters; multiple words separated by underscores; e.g. LEAGUE
- Enumeration: begins lowercase, continues camel; the set of objects should be uppercase; is a noun;
e.g. enum Occupation{ MANNED, SEMI_MANNED, UNMANNED }
- Package: all lowercase letters; public package should be the reversed domain name of org; e.g. eu.manumouton.ocaj

3. Compiler and interpreter

3.1. javac Compiler

javac [options] [source files]
javac -d [directory path] [source files]
javac -d classes -classpath (or -cp) 3rdPartyCode/classes/;. [source files] : include every source files in 3rdPartyCode/classes/
as well as every sources in the current working directory represented by period

javac -help

Usage: javac <options> <source files>
where possible options include:
  -g                         Generate all debugging info
  -g:none                    Generate no debugging info
  -g:{lines,vars,source}     Generate only some debugging info
  -nowarn                    Generate no warnings
  -verbose                   Output messages about what the compiler is doing
  -deprecation               Output source locations where deprecated APIs are used
  -classpath <path>          Specify where to find user class files and annotation processors
  -cp <path>                 Specify where to find user class files and annotation processors
  -sourcepath <path>         Specify where to find input source files
  -bootclasspath <path>      Override location of bootstrap class files
  -extdirs <dirs>            Override location of installed extensions
  -endorseddirs <dirs>       Override location of endorsed standards path
  -proc:{none,only}          Control whether annotation processing and/or compilation is done.
  -processor <class1>[,<class2>,<class3>...] Names of the annotation processors to run; bypasses default discovery process
  -processorpath <path>      Specify where to find annotation processors
  -parameters                Generate metadata for reflection on method parameters
  -d <directory>             Specify where to place generated class files
  -s <directory>             Specify where to place generated source files
  -h <directory>             Specify where to place generated native header files
  -implicit:{none,class}     Specify whether or not to generate class files for implicitly referenced files
  -encoding <encoding>       Specify character encoding used by source files
  -source <release>          Provide source compatibility with specified release
  -target <release>          Generate class files for specific VM version
  -profile <profile>         Check that API used is available in the specified profile
  -version                   Version information
  -help                      Print a synopsis of standard options
  -Akey[=value]              Options to pass to annotation processors
  -X                         Print a synopsis of nonstandard options
  -J<flag>                   Pass <flag> directly to the runtime system
  -Werror                    Terminate compilation if warnings occur
  @<filename>                Read options and filenames from file

3.2. java Interpreter

java [-options] class [args...]
javaw: execute and exclude the command window
java -cp classes com.ocajexam.tutorial.MainClass
java -D<name>=<value> class

$ java -help
Syntaxe : java [-options] class [args...]
           (pour l'exécution d'une classe)
   ou  java [-options] -jar jarfile [args...]
           (pour l'exécution d'un fichier JAR)
où les options comprennent :
    -d32	  utilisez le modèle de données 32 bits s'il est disponible
    -d64	  utilisez le modèle de données 64 bits s'il est disponible
    -server	  pour sélectionner la machine virtuelle "server"
                  La machine virtuelle par défaut est server,
                  car vous exécutez une machine de classe de serveur.


    -cp <class search path of directories and zip/jar files>
    -classpath <class search path of directories and zip/jar files>
                  Liste de répertoires, d'archives JAR et
                   d'archives ZIP séparés par des :, dans laquelle rechercher les fichiers de classe.
    -D<name>=<value>
                  définition d'une propriété système
    -verbose:[class|gc|jni]
                  activation de la sortie en mode verbose
    -version      impression de la version du produit et fin de l'opération
    -version:<value>
                  exécution de la version spécifiée obligatoire
    -showversion  impression de la version du produit et poursuite de l'opération
    -jre-restrict-search | -no-jre-restrict-search
                  inclusion/exclusion des environnements JRE privés de l'utilisateur dans la recherche de version
    -? -help      impression du message d'aide
    -X            impression de l'aide sur les options non standard
    -ea[:<packagename>...|:<classname>]
    -enableassertions[:<packagename>...|:<classname>]
                  activation des assertions avec la granularité spécifiée
    -da[:<packagename>...|:<classname>]
    -disableassertions[:<packagename>...|:<classname>]
                  désactivation des assertions avec la granularité spécifiée
    -esa | -enablesystemassertions
                  activation des assertions système
    -dsa | -disablesystemassertions
                  désactivation des assertions système
    -agentlib:<libname>[=<options>]
                  chargement de la bibliothèque d'agent natif <libname>, par exemple -agentlib:hprof
                  voir également, -agentlib:jdwp=help et -agentlib:hprof=help
    -agentpath:<pathname>[=<options>]
                  chargement de la bibliothèque d'agent natif via le chemin d'accès complet
    -javaagent:<jarpath>[=<options>]
                  chargement de l'agent du langage de programmation Java, voir java.lang.instrument
    -splash:<imagepath>
                  affichage de l'écran d'accueil avec l'image spécifiée
Voir http://www.oracle.com/technetwork/java/javase/documentation/index.html pour plus de détails.

Exercice : javac -d . GreetingsUniverse.java;planets/*.java => permission denied ??

